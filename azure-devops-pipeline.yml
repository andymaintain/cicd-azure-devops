trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - docs/*
      - README.md

pr:
  branches:
    include:
      - main
  paths:
    exclude:
      - docs/*
      - README.md

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'youverify-aksdevopsacr-svc'
  imageRepository: 'youverifyaksnodejsapp1'
  containerRegistry: 'acryouverifydev.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: '$(acrimagepullsecret)'
  nodeJsVersion: '14.x'
  workDir: './'
  vmImageName: 'ubuntu-18.04'
  isPr: $[eq(variables['Build.Reason'], 'PullRequest')]
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  #vmImageName: 'ubuntu-latest'
  

stages:
### Testing
- stage: RunLinters
  displayName: Run Linters
  dependsOn: []
  condition: eq(variables.isMain, True)
  jobs:
  - job: 'RunCodeLinters'
    displayName: 'Run Code Linters'
    pool:
      vmImage: $(vmImageName)

    steps:
    - checkout: self
      clean: true

    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeJsVersion)
      displayName: 'Install Node.js'

    - task: Npm@1
      displayName: 'Npm cache verify'
      inputs:
        workingDir: $(workDir)
        command: custom
        customCommand: cache verify

    - task: Npm@1
      displayName: 'Npm ci'
      inputs:
        workingDir: $(workDir)
        command: custom
        customCommand: ci

    - task: Npm@1
      displayName: 'Npm eslint'
      inputs:
        workingDir: $(workDir)
        command: custom
        customCommand: run eslint

- stage: RunTests
  displayName: Run Tests
  dependsOn: [RunLinters]
  condition: xor(eq(variables.isPr, True), eq(variables.isMain, True))
  jobs:
  - job: 'RunCodeTesting'
    displayName: 'Run Code Testing'
    pool:
      vmImage: $(vmImageName)

    steps:
    - checkout: self
      clean: true

    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeJsVersion)
      displayName: 'Install Node.js'

    - task: Npm@1
      displayName: 'Npm cache verify'
      inputs:
        workingDir: $(workDir)
        command: custom
        customCommand: cache verify

    - task: Npm@1
      displayName: 'Npm ci'
      inputs:
        workingDir: $(workDir)
        command: custom
        customCommand: ci

    - task: Npm@1
      displayName: 'Npm tests'
      inputs:
        workingDir: $(workDir)
        command: custom
        customCommand: run test-ci

    - task: PublishTestResults@2
      displayName: 'Publish unit test results'
      condition: succeededOrFailed()
      inputs:
        testRunTitle: Angular
        testResultsFormat: JUnit
        testResultsFiles: "**/TESTS*.xml"

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/coverage/**/*.xml'
      condition: and(succeeded(), not(contains(variables['COMMANDS'],'"test":[]')))

    - task: CopyFiles@2
      displayName: 'Copy code coverage results'
      inputs:
        sourceFolder: ./coverage
        contents: 'lcov.info'
        targetFolder: '$(Build.ArtifactStagingDirectory)/'

    - publish: '$(Build.ArtifactStagingDirectory)/lcov.info'
      displayName: 'Publish coverage results'
      artifact: code_coverage

- stage: Build
  displayName: Build stage
  dependsOn: [RunTests]
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          
## Publish Artifacts pipeline code in addition to Build and Push                  
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/kube-files'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        OverWrite: true

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'kube-files'
        publishLocation: 'Container'

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/kube-files/deployment.yml
                $(Pipeline.Workspace)/kube-files/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)